name: Rom-Builder

on:
  push:
    branches: [ Test ]

jobs:
  build:
    name: Rom-Builder
    runs-on: ubuntu-latest
    if: github.actor == 'NFS86'
    steps:
    - name: Clone Script..
      uses: NFS86/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        user: medusa
        pass: ${{ secrets.PASSWORD }}
        args: "-tt"
        command: |
          my_dir="$HOME"
          mkdir -p $my_dir/script
          cd $my_dir/script
          rm -rf *
          wget https://raw.githubusercontent.com/NFS-projects/Rom-Builder/Test/script/sync.sh
          wget https://raw.githubusercontent.com/NFS-projects/Rom-Builder/Test/script/building.sh
          wget https://raw.githubusercontent.com/NFS-projects/Rom-Builder/Test/script/upload.sh
          wget https://raw.githubusercontent.com/NFS-projects/Rom-Builder/Test/rosy/build_rom.sh

    - name: Sync Rom..
      uses: NFS86/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        user: medusa
        pass: ${{ secrets.PASSWORD }}
        args: "-tt"
        command: |
          bash $HOME/script/sync.sh

    - name: Building Rom..
      uses: NFS86/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        user: medusa
        pass: ${{ secrets.PASSWORD }}
        args: "-tt"
        command: |
          bash $HOME/script/building.sh

    - name: Upload Rom..
      uses: NFS86/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        user: medusa
        pass: ${{ secrets.PASSWORD }}
        command: |
          bash $HOME/script/upload.sh

    - name: Send notif..
      uses: NFS86/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        user: medusa
        pass: ${{ secrets.PASSWORD }}
        args: "-tt"
        command: |
          export my_dir="$HOME"
          export device="$(grep unch $my_dir/script/build_rom.sh -m 1 | cut -d ' ' -f 2 | cut -d _ -f 2 | cut -d - -f 1)"
          export rom_name="$(grep init $my_dir/script/$device/build.sh -m 1 | cut -d / -f 4)"
          export branch_name=$(grep init $my_dir/script/$device/build.sh | awk -F "-b " '{print $2}' | awk '{print $1}')
          cd $my_dir/$rom_name/out/target/product/$device
          export rel_date="$(date "+%Y%m%d")"
          export file_name="$(echo *${rel_date}*.zip)"
          telegram_message() {
                   curl -s -X POST "https://api.telegram.org/bot${tg_token}/sendMessage" \
                   -d chat_id="${tg_id}" \
                   -d parse_mode="HTML" \
                   -d text="$1"
          }
          DL_LINK="https://rombuilder.projek.workers.dev/$rom_name/$device/$file_name"
          echo "=============================================="
          echo "Download Link: ${DL_LINK}" || { echo "ERROR: Failed to Upload the Build!"; }
          echo "=============================================="
          DATE_L="$(date +%d\ %B\ %Y)"
          DATE_S="$(date +"%T")"
          echo -e \
          "
          üöÄ ${rom_name}
          
          ‚úÖ Build Completed Successfully!
          
          üì± Device: "${device_model}"
          üñ• Branch Build: "${branch_name}"
          ‚¨áÔ∏è Download Link: <a href=\"${DL_LINK}\">Here</a>
          üìÖ Date: "$(date +%d\ %B\ %Y)"
          ‚è± Time: "$(date +%T)"
          " > tg.html
          TG_TEXT=$(< tg.html)
          telegram_message "$TG_TEXT"
          echo " "
          rm -rf $my_dir/$rom_name/out/target/product/$device
          cd $my_dir
          rm -rf .repo*
